package io.github.amarcinkowski.c64.asm;

import java.util.HashMap;

import static io.github.amarcinkowski.c64.asm.Addressing.*;
import static io.github.amarcinkowski.c64.asm.Mnemonic.*;

enum Mnemonic {
    ADC(" adc"),
    ANC(" anc"),
    AND(" and"),
    ANE(" ane"),
    ARR(" arr"),
    ASL(" asl"),
    ASR(" asr"),
    BCC(" bcc"),
    BCS(" bcs"),
    BEQ(" beq"),
    BIT(" bit"),
    BMI(" bmi"),
    BNE(" bne"),
    BPL(" bpl"),
    BRK(" brk"),
    BVC(" bvc"),
    BVS(" bvs"),
    CLC(" clc"),
    CLD(" cld"),
    CLI(" cli"),
    CLV(" clv"),
    CMP(" cmp"),
    CPX(" cpx"),
    CPY(" cpy"),
    DCP(" dcp"),
    DEC(" dec"),
    DEX(" dex"),
    DEY(" dey"),
    EOR(" eor"),
    INC(" inc"),
    INX(" inx"),
    INY(" iny"),
    ISB(" isb"),
    JAM(" jam"),
    JMP(" jmp"),
    JSR(" jsr"),
    LAE(" lae"),
    LAX(" lax"),
    LDA(" lda"),
    LDX(" ldx"),
    LDY(" ldy"),
    LSR(" lsr"),
    LXA(" lxa"),
    NOP(" nop"),
    ORA(" ora"),
    PHA(" pha"),
    PHP(" php"),
    PLA(" pla"),
    PLP(" plp"),
    RLA(" rla"),
    ROL(" rol"),
    ROR(" ror"),
    RRA(" rra"),
    RTI(" rti"),
    RTS(" rts"),
    SAX(" sax"),
    SBC(" sbc"),
    SBX(" sbx"),
    SEC(" sec"),
    SED(" sed"),
    SEI(" sei"),
    SHA(" sha"),
    SHS(" shs"),
    SHX(" shx"),
    SHY(" shy"),
    SLO(" slo"),
    SRE(" sre"),
    STA(" sta"),
    STX(" stx"),
    STY(" sty"),
    TAX(" tax"),
    TAY(" tay"),
    TSX(" tsx"),
    TXA(" txa"),
    TXS(" txs"),
    TYA(" tya"),
    ;
    public String mnemonic;

    Mnemonic(String mnemonic) {
        this.mnemonic = mnemonic;
    }
}

/**
 * Opcodes taken and parsed from C=haking 1 ( http://www.ffd2.com/fridge/chacking/c=hacking1.txt )
 */

@SuppressWarnings("unused")
public enum Opcode {

    BRK_IMM(BRK, true, 0x00, "Stack <- PC, PC <- ($fffe)", IMMEDIATE, 1, 7),
    ORA_INDX(ORA, true, 0x01, "A <- (A) V M", INDX, 6, 2),
    JAM1__(JAM, false, 0x02, "[locks up machine]", IMPLIED, 1, 0),
    SLO_INDX(SLO, false, 0x03, "M <- (M >> 1) + A + C", INDX, 2, 8),
    NOP_ZPG(NOP, false, 0x04, "[no operation]", ZPAGE, 2, 3),
    ORA_ZPG(ORA, true, 0x05, "A <- (A) V M", ZPAGE, 2, 3),
    ASL_ZPG(ASL, true, 0x06, "C <- A7, A <- (A) << 1", ZPAGE, 2, 5),
    SLO_ZPG(SLO, false, 0x07, "M <- (M >> 1) + A + C", ZPAGE, 2, 5),
    PHP_IMP(PHP, true, 0x08, "Stack <- (P)", IMPLIED, 1, 3),
    ORA_IMM(ORA, true, 0x09, "A <- (A) V M", IMMEDIATE, 2, 2),
    ASL_ACC(ASL, true, 0x0A, "C <- A7, A <- (A) << 1", ACCUMULATOR, 1, 2),
    ANC_IMM(ANC, false, 0x0B, "A <- A^M, C=~A7", IMMEDIATE, 1, 2),
    NOP_ABS(NOP, false, 0x0C, "[no operation]", ABSOLUTE, 3, 4),
    ORA_ABS(ORA, true, 0x0D, "A <- (A) V M", ABSOLUTE, 3, 4),
    ASL_ABS(ASL, true, 0x0E, "C <- A7, A <- (A) << 1", ABSOLUTE, 3, 6),
    SLO_ABS(SLO, false, 0x0F, "M <- (M >> 1) + A + C", ABSOLUTE, 3, 6),
    BPL_REL(BPL, true, 0x10, "if N=0, PC = PC + offset", RELATIVE, 2, 2, 2),
    ORA_INDY(ORA, true, 0x11, "A <- (A) V M", INDY, 2, 5, 1),
    JAM2__(JAM, false, 0x12, "[locks up machine]", IMPLIED, 1, 0),
    SLO_INDY(SLO, false, 0x13, "M <- (M >. 1) + A + C", INDY, 2, 8, 5),
    NOP_ZX(NOP, false, 0x14, "[no operation]", ZPAGEX, 2, 4),
    ORA_ZX(ORA, true, 0x15, "A <- (A) V M", ZPAGEX, 2, 4),
    ASL_ZX(ASL, true, 0x16, "C <- A7, A <- (A) << 1", ZPAGEX, 2, 6),
    SLO_ZX(SLO, false, 0x17, "M <- (M >> 1) + A + C", ZPAGEX, 2, 6),
    CLC_IMP(CLC, true, 0x18, "C <- 0", IMPLIED, 1, 2),
    ORA_AY(ORA, true, 0x19, "A <- (A) V M", ABSOLUTEY, 3, 4, 1),
    NOP_IMP(NOP, false, 0x1A, "[no operation]", IMPLIED, 1, 2),
    SLO_AY(SLO, false, 0x1B, "M <- (M >> 1) + A + C", ABSOLUTEY, 3, 7),
    NOP_AX(NOP, false, 0x1C, "[no operation]", ABSOLUTEX, 2, 4, 1),
    ORA_AX(ORA, true, 0x1D, "A <- (A) V M", ABSOLUTEX, 3, 4, 1),
    ASL_AX(ASL, true, 0x1E, "C <- A7, A <- (A) << 1", ABSOLUTEX, 3, 7),
    SLO_AX(SLO, false, 0x1F, "M <- (M >> 1) + A + C", ABSOLUTEX, 3, 7),
    JSR_ABS(JSR, true, 0x20, "Stack <- PC, PC <- Address", ABSOLUTE, 3, 6),
    AND_INDX(AND, true, 0x21, "A <- (A)^M", INDX, 2, 6),
    JAM3__(JAM, false, 0x22, "[locks up machine]", IMPLIED, 1, 0),
    RLA_INDX(RLA, false, 0x23, "M <- (M << 1)^(A)", INDX, 2, 8),
    BIT_ZPG(BIT, true, 0x24, "Z <- ~(A^M) N<-M7 V<-M6", ZPAGE, 2, 3),
    AND_ZPG(AND, true, 0x25, "A <- (A)^M", ZPAGE, 2, 3),
    ROL_ZPG(ROL, true, 0x26, "C <- A7 & A <- A << 1 + C", ZPAGE, 2, 5),
    RLA_ZPG(RLA, false, 0x27, "M <- (M << 1)^(A)", ZPAGE, 2, 5, 5),
    PLP_IMP(PLP, true, 0x28, "A <- (Stack)", IMPLIED, 1, 4),
    AND_IMM(AND, true, 0x29, "A <- (A)^M", IMMEDIATE, 2, 2),
    ROL_ACC(ROL, true, 0x2A, "C <- A7 & A <- A << 1 + C", ACCUMULATOR, 1, 2),
    ANC_IMM2(ANC, false, 0x2B, "A <- A^M, C <- ~A7", IMMEDIATE, 1, 2),
    BIT_ABS(BIT, true, 0x2C, "Z <- ~(A^M) N<-M7 V<-M6", ABSOLUTE, 3, 4),
    AND_ABS(AND, true, 0x2D, "A <- (A)^M", ABSOLUTE, 3, 4),
    ROL_ABS(ROL, true, 0x2E, "C <- A7 & A <- A << 1 + C", ABSOLUTE, 3, 6),
    RLA_ABS(RLA, false, 0x2F, "M <- (M << 1)^(A)", ABSOLUTE, 3, 6, 5),
    BMI_REL(BMI, true, 0x30, "if N=1, PC = PC + offset", RELATIVE, 2, 2, 2),
    AND_INDY(AND, true, 0x31, "A <- (A)^M", INDY, 2, 5, 1),
    JAM4__(JAM, false, 0x32, "[locks up machine]", IMPLIED, 1, 0),
    RLA_INDY(RLA, false, 0x33, "M <- (M << 1)^(A)", INDY, 2, 8, 5),
    NOP_ZX2(NOP, false, 0x34, "[no operation]", ZPAGEX, 2, 4),
    AND_ZX(AND, true, 0x35, "A <- (A)^M", ZPAGEX, 2, 4),
    ROL_ZX(ROL, true, 0x36, "C <- A7 & A <- A << 1 + C", ZPAGEX, 2, 6),
    RLA_ZX(RLA, false, 0x37, "M <- (M << 1)^(A)", ZPAGEX, 2, 6, 5),
    SEC_IMP(SEC, true, 0x38, "C <- 1", IMPLIED, 1, 2),
    AND_AY(AND, true, 0x39, "A <- (A)^M", ABSOLUTEY, 3, 4, 1),
    NOP_IMP2(NOP, false, 0x3A, "[no operation]", IMPLIED, 1, 2),
    RLA_AY(RLA, false, 0x3B, "M <- (M << 1)^(A)", ABSOLUTEY, 3, 7, 5),
    NOP_AX2(NOP, false, 0x3C, "[no operation]", ABSOLUTEX, 3, 4, 1),
    AND_AX(AND, true, 0x3D, "A <- (A)^M", ABSOLUTEX, 3, 4, 1),
    ROL_AX(ROL, true, 0x3E, "C <- A7 & A <- A << 1 + C", ABSOLUTEX, 3, 7),
    RLA_AX(RLA, false, 0x3F, "M <- (M << 1)^(A)", ABSOLUTEX, 3, 7, 5),
    RTI_IMP(RTI, true, 0x40, "P <- (Stack), PC <-(Stack)", IMPLIED, 1, 6),
    EOR_INDX(EOR, true, 0x41, "A <- (A) ⊻ M", INDX, 2, 6),
    JAM5__(JAM, false, 0x42, "[locks up machine]", IMPLIED, 1, 0),
    SRE_INDX(SRE, false, 0x43, "M <- (M >> 1) ⊻ A", INDX, 2, 8),
    NOP_Z2(NOP, false, 0x44, "[no operation]", ZPAGE, 2, 3),
    EOR_ZPG(EOR, true, 0x45, "A <- (A) ⊻ M", ZPAGE, 2, 3),
    LSR_AX(LSR, true, 0x46, "C <- A0, A <- (A) >> 1", ABSOLUTEX, 3, 7),
    SRE_ZPG(SRE, false, 0x47, "M <- (M >> 1) ⊻ A", ZPAGE, 2, 5),
    PHA_IMP(PHA, true, 0x48, "Stack <- (A)", IMPLIED, 1, 3),
    EOR_IMM(EOR, true, 0x49, "A <- (A) ⊻ M", IMMEDIATE, 2, 2),
    LSR_ACC(LSR, true, 0x4A, "C <- A0, A <- (A) >> 1", ACCUMULATOR, 1, 2),
    ASR_IMM(ASR, false, 0x4B, "A <- [(A^M) >> 1]", IMMEDIATE, 1, 2),
    JMP_ABS(JMP, true, 0x4C, "PC <- Address", ABSOLUTE, 3, 3),
    EOR_ABS(EOR, true, 0x4D, "A <- (A) ⊻ M", ABSOLUTE, 3, 4),
    LSR_ABS(LSR, true, 0x4E, "C <- A0, A <- (A) >> 1", ABSOLUTE, 3, 6),
    SRE_ABS(SRE, false, 0x4F, "M <- (M >> 1) ⊻ A", ABSOLUTE, 3, 6),
    BVC_REL(BVC, true, 0x50, "if V=0, PC = PC + offset", RELATIVE, 2, 2, 2),
    EOR_INDY(EOR, true, 0x51, "A <- (A) ⊻ M", INDY, 2, 5, 1),
    JAM6__(JAM, false, 0x52, "[locks up machine]", IMPLIED, 1, 0),
    SRE_INDY(SRE, false, 0x53, "M <- (M >> 1) ⊻ A", INDY, 2, 8),
    NOP_ZX3(NOP, false, 0x54, "[no operation]", ZPAGEX, 2, 4),
    EOR_ZX(EOR, true, 0x55, "A <- (A) ⊻ M", ZPAGEX, 2, 4),
    LSR_ZX(LSR, true, 0x56, "C <- A0, A <- (A) >> 1", ZPAGEX, 2, 6),
    SRE_ZX(SRE, false, 0x57, "M <- (M >> 1) ⊻ A", ZPAGEX, 2, 6),
    CLI_IMP(CLI, true, 0x58, "I <- 0", IMPLIED, 1, 2),
    EOR_AY(EOR, true, 0x59, "A <- (A) ⊻ M", ABSOLUTEY, 3, 4, 1),
    NOP_IMP3(NOP, false, 0x5A, "[no operation]", IMPLIED, 1, 2),
    SRE_AY(SRE, false, 0x5B, "M <- (M >> 1) ⊻ A", ABSOLUTEY, 3, 7),
    NOP_AX3(NOP, false, 0x5C, "[no operation]", ABSOLUTEX, 3, 4, 1),
    EOR_AX(EOR, true, 0x5D, "A <- (A) ⊻ M", ABSOLUTEX, 3, 4, 1),
    // MISSING ???
    LSR_AXxxx(LSR, true, 0x5E, "??", ABSOLUTEX, 3, 7),
    SRE_AX(SRE, false, 0x5F, "M <- (M >> 1) ⊻ A", ABSOLUTEX, 3, 7),
    RTS_IMP(RTS, true, 0x60, "PC <- (Stack)", IMPLIED, 1, 6),
    ADC_INDX(ADC, true, 0x61, "A <- (A) + M + C", INDX, 2, 6),
    JAM7__(JAM, false, 0x62, "[locks up machine]", IMPLIED, 1, 0),
    RRA_INDX(RRA, false, 0x63, "M <- (M >> 1) + (A) + C", INDX, 2, 8, 5),
    NOP_Z3(NOP, false, 0x64, "[no operation]", ZPAGE, 2, 3),
    ADC_ZPG(ADC, true, 0x65, "A <- (A) + M + C", ZPAGE, 2, 3),
    ROR_ZPG(ROR, true, 0x66, "C<-A0 & A<- (A7=C + A>>1)", ZPAGE, 2, 5),
    RRA_ZPG(RRA, false, 0x67, "M <- (M >> 1) + (A) + C", ZPAGE, 2, 5, 5),
    PLA_IMP(PLA, true, 0x68, "A <- (Stack)", IMPLIED, 1, 4),
    ADC_IMM(ADC, true, 0x69, "A <- (A) + M + C", IMMEDIATE, 2, 2),
    ROR_ACC(ROR, true, 0x6A, "C<-A0 & A<- (A7=C + A>>1)", ACCUMULATOR, 1, 2),
    ARR_IMM(ARR, false, 0x6B, "A <- [(A^M) >> 1]", IMMEDIATE, 1, 2, 5),
    JMP_INDIRECT(JMP, true, 0x6C, "PC <- Address", INDIRECT, 3, 5),
    ADC_ABS(ADC, true, 0x6D, "A <- (A) + M + C", ABSOLUTE, 3, 4),
    ROR_ABS(ROR, true, 0x6E, "C<-A0 & A<- (A7=C + A>>1)", ABSOLUTE, 3, 6),
    RRA_ABS(RRA, false, 0x6F, "M <- (M >> 1) + (A) + C", ABSOLUTE, 3, 6, 5),
    BVS_REL(BVS, true, 0x70, "if V=1, PC = PC + offset", RELATIVE, 2, 2, 2),
    ADC_INDY(ADC, true, 0x71, "A <- (A) + M + C", INDY, 2, 5, 1),
    JAM8__(JAM, false, 0x72, "[locks up machine]", IMPLIED, 1, 0),
    RRA_INDY(RRA, false, 0x73, "M <- (M >> 1) + (A) + C", INDY, 2, 8, 5),
    NOP_ZX4(NOP, false, 0x74, "[no operation]", ZPAGEX, 2, 4),
    ADC_ZX(ADC, true, 0x75, "A <- (A) + M + C", ZPAGEX, 2, 4),
    ROR_ZX(ROR, true, 0x76, "C<-A0 & A<- (A7=C + A>>1)", ZPAGEX, 2, 6),
    RRA_ZX(RRA, false, 0x77, "M <- (M >> 1) + (A) + C", ZPAGEX, 2, 6, 5),
    SEI_IMP(SEI, true, 0x78, "I <- 1", IMPLIED, 1, 2),
    ADC_AY(ADC, true, 0x79, "A <- (A) + M + C", ABSOLUTEY, 3, 4, 1),
    NOP_IMP4(NOP, false, 0x7A, "[no operation]", IMPLIED, 1, 2),
    RRA_AY(RRA, false, 0x7B, "M <- (M >> 1) + (A) + C", ABSOLUTEY, 3, 7, 5),
    NOP_AX4(NOP, false, 0x7C, "[no operation]", ABSOLUTEX, 3, 4, 1),
    ADC_AX(ADC, true, 0x7D, "A <- (A) + M + C", ABSOLUTEX, 3, 4, 1),
    ROR_AX(ROR, true, 0x7E, "C<-A0 & A<- (A7=C + A>>1)", ABSOLUTEX, 3, 7),
    RRA_AX(RRA, false, 0x7F, "M <- (M >> 1) + (A) + C", ABSOLUTEX, 3, 7, 5),
    NOP_IMM(NOP, false, 0x80, "[no operation]", IMMEDIATE, 2, 2),
    STA_INDX(STA, true, 0x81, "M <- (A)", INDX, 2, 6),
    NOP_IMM1(NOP, false, 0x82, "[no operation]", IMMEDIATE, 2, 2),
    SAX_INDX(SAX, false, 0x83, "M <- (A)^(X)", INDX, 2, 6),
    STY_ZPG(STY, true, 0x84, "M <- (Y)", ZPAGE, 2, 3),
    STA_ZPG(STA, true, 0x85, "M <- (A)", ZPAGE, 2, 3),
    STX_ZPG(STX, true, 0x86, "M <- (X)", ZPAGE, 2, 3),
    SAX_ZPG(SAX, false, 0x87, "M <- (A)^(X)", ZPAGE, 2, 3),
    DEY_IMP(DEY, true, 0x88, "Y <- (Y) - 1", IMPLIED, 1, 2),
    NOP_IMM2(NOP, false, 0x89, "[no operation]", IMMEDIATE, 2, 2),
    TXA_IMP(TXA, true, 0x8A, "A <- (X)", IMPLIED, 1, 2),
    ANE_IMM(ANE, false, 0x8B, "M <-[(A)v$EE]^(X)^(M)", IMMEDIATE, 2, 2, 4),
    STY_ABS(STY, true, 0x8C, "M <- (Y)", ABSOLUTE, 3, 4),
    STA_ABS(STA, true, 0x8D, "M <- (A)", ABSOLUTE, 3, 4),
    STX_ABS(STX, true, 0x8E, "M <- (X)", ABSOLUTE, 3, 4),
    SAX_ABS(SAX, false, 0x8F, "M <- (A)^(X)", ABSOLUTE, 3, 4),
    BCC_REL(BCC, true, 0x90, "if C=0, PC = PC + offset", RELATIVE, 2, 2, 2),
    STA_INDY(STA, true, 0x91, "M <- (A)", INDY, 2, 6),
    JAM9__(JAM, false, 0x92, "[locks up machine]", IMPLIED, 1, 0),
    SHA_AX(SHA, false, 0x93, "M <- (A)^(X)^(PCH+1)", ABSOLUTEX, 3, 6, 3),
    STY_ZX(STY, true, 0x94, "M <- (Y)", ZPAGEX, 2, 4),
    STA_ZX(STA, true, 0x95, "M <- (A)", ZPAGEX, 2, 4),
    SAX_ZY(SAX, false, 0x97, "M <- (A)^(X)", ZPAGEY, 2, 4),
    STX_ZY(STX, true, 0x96, "M <- (X)", ZPAGEY, 2, 4),
    TYA_IMP(TYA, true, 0x98, "A <- (Y)", IMPLIED, 1, 2),
    STA_AY(STA, true, 0x99, "M <- (A)", ABSOLUTEY, 3, 5),
    TXS_IMP(TXS, true, 0x9A, "S <- (X)", IMPLIED, 1, 2),
    SHS_AY(SHS, false, 0x9B, "X <- (A)^(X), S <- (X) \n M <- (X)^(PCH+1)", ABSOLUTEY, 3, 5),
    SHY_AY(SHY, false, 0x9C, "M <- (Y)^(PCH+1)", ABSOLUTEY, 3, 5, 3),
    STA_AX(STA, true, 0x9D, "M <- (A)", ABSOLUTEX, 3, 5),
    SHX_AX(SHX, false, 0x9E, "M <- (X)^(PCH+1)", ABSOLUTEX, 3, 5, 3),
    SHA_AY(SHA, false, 0x9F, "M <- (A)^(X)^(PCH+1)", ABSOLUTEY, 3, 5, 3),
    LDY_IMM(LDY, true, 0xA0, "Y <- M", IMMEDIATE, 2, 2),
    LDA_INDX(LDA, true, 0xA1, "A <- M", INDX, 2, 6),
    LDX_IMM(LDX, true, 0xA2, "X <- M", IMMEDIATE, 2, 2),
    LAX_INDX(LAX, false, 0xA3, "A <- M, X <- M", INDX, 2, 6),
    LDY_ZPG(LDY, true, 0xA4, "Y <- M", ZPAGE, 2, 3),
    LDA_ZPG(LDA, true, 0xA5, "A <- M", ZPAGE, 2, 3),
    LDX_ZPG(LDX, true, 0xA6, "X <- M", ZPAGE, 2, 3),
    LAX_ZPG(LAX, false, 0xA7, "A <- M, X <- M", ZPAGE, 2, 3),
    TAY_IMP(TAY, true, 0xA8, "Y <- (A)", IMPLIED, 1, 2),
    LDA_IMM(LDA, true, 0xA9, "A <- M", IMMEDIATE, 2, 2),
    TAX_IMP(TAX, true, 0xAA, "X <- (A)", IMPLIED, 1, 2),
    LXA_IMM(LXA, false, 0xAB, "X04 <- (X04)^M04 \nA04 <- (A04)^M04", IMMEDIATE, 1, 2),
    LDY_ABS(LDY, true, 0xAC, "Y <- M", ABSOLUTE, 3, 4),
    LDA_ABS(LDA, true, 0xAD, "A <- M", ABSOLUTE, 3, 4),
    LDX_ABS(LDX, true, 0xAE, "X <- M", ABSOLUTE, 3, 4),
    LAX_ABS(LAX, false, 0xAF, "A <- M, X <- M", ABSOLUTE, 3, 4),
    BCS_REL(BCS, true, 0xB0, "if C=1, PC = PC + offset", RELATIVE, 2, 2, 2),
    LDA_INDY(LDA, true, 0xB1, "A <- M", INDY, 2, 5, 1),
    JAM10__(JAM, false, 0xB2, "[locks up machine]", IMPLIED, 1, 0),
    LAX_INDY(LAX, false, 0xB3, "A <- M, X <- M", INDY, 2, 5, 1),
    LDY_ZX(LDY, true, 0xB4, "Y <- M", ZPAGEX, 2, 4),
    LDA_ZX(LDA, true, 0xB5, "A <- M", ZPAGEX, 2, 4),
    LDX_ZY(LDX, true, 0xB6, "X <- M", ZPAGEY, 2, 4),
    LAX_ZY(LAX, false, 0xB7, "A <- M, X <- M", ZPAGEY, 2, 4),
    CLV_IMP(CLV, true, 0xB8, "V <- 0", IMPLIED, 1, 2),
    LDA_AY(LDA, true, 0xB9, "A <- M", ABSOLUTEY, 3, 4, 1),
    TSX_IMP(TSX, true, 0xBA, "X <- (S)", IMPLIED, 1, 2),
    LAE_AY(LAE, false, 0xBB, "X,S,A <- (S^M)", ABSOLUTEY, 3, 4, 1),
    LDY_AX(LDY, true, 0xBC, "Y <- M", ABSOLUTEX, 3, 4, 1),
    LDA_AX(LDA, true, 0xBD, "A <- M", ABSOLUTEX, 3, 4, 1),
    LDX_AY(LDX, true, 0xBE, "X <- M", ABSOLUTEY, 3, 4, 1),
    LAX_AY(LAX, false, 0xBF, "A <- M, X <- M", ABSOLUTEY, 3, 4, 1),
    CPY_IMM(CPY, true, 0xC0, "(Y - M) -> NZC", IMMEDIATE, 2, 2),
    CMP_INDX(CMP, true, 0xC1, "(A - M) -> NZC", INDX, 2, 6),
    NOP_IMM3(NOP, false, 0xC2, "[no operation]", IMMEDIATE, 2, 2),
    DCP_INDX(DCP, false, 0xC3, "M <- (M)-1, (A-M) -> NZC", INDX, 2, 8),
    CPY_ZPG(CPY, true, 0xC4, "(Y - M) -> NZC", ZPAGE, 2, 3),
    CMP_ZPG(CMP, true, 0xC5, "(A - M) -> NZC", ZPAGE, 2, 3),
    DEC_ZPG(DEC, true, 0xC6, "M <- (M) - 1", ZPAGE, 2, 5),
    DCP_ZPG(DCP, false, 0xC7, "M <- (M)-1, (A-M) -> NZC", ZPAGE, 2, 5),
    INY_IMP(INY, true, 0xC8, "Y <- (Y) + 1", IMPLIED, 1, 2),
    CMP_IMM(CMP, true, 0xC9, "(A - M) -> NZC", IMMEDIATE, 2, 2),
    DEX_IMP(DEX, true, 0xCA, "X <- (X) - 1", IMPLIED, 1, 2),
    SBX_IMM(SBX, false, 0xCB, "X <- (X)^(A) - M", IMMEDIATE, 2, 2),
    CPY_ABS(CPY, true, 0xCC, "(Y - M) -> NZC", ABSOLUTE, 3, 4),
    CMP_ABS(CMP, true, 0xCD, "(A - M) -> NZC", ABSOLUTE, 3, 4),
    DEC_ABS(DEC, true, 0xCE, "M <- (M) - 1", ABSOLUTE, 3, 6),
    DCP_ABS(DCP, false, 0xCF, "M <- (M)-1, (A-M) -> NZC", ABSOLUTE, 3, 6),
    BNE_REL(BNE, true, 0xD0, "if Z=0, PC = PC + offset", RELATIVE, 2, 2, 2),
    CMP_INDY(CMP, true, 0xD1, "(A - M) -> NZC", INDY, 2, 5, 1),
    JAM11__(JAM, false, 0xD2, "[locks up machine]", IMPLIED, 1, 0),
    DCP_INDY(DCP, false, 0xD3, "M <- (M)-1, (A-M) -> NZC", INDY, 2, 8),
    NOP_ZX5(NOP, false, 0xD4, "[no operation]", ZPAGEX, 2, 4),
    CMP_ZX(CMP, true, 0xD5, "(A - M) -> NZC", ZPAGEX, 2, 4),
    DEC_ZX(DEC, true, 0xD6, "M <- (M) - 1", ZPAGEX, 2, 6),
    DCP_ZX(DCP, false, 0xD7, "M <- (M)-1, (A-M) -> NZC", ZPAGEX, 2, 6),
    CLD_IMP(CLD, true, 0xD8, "D <- 0", IMPLIED, 1, 2),
    CMP_AY(CMP, true, 0xD9, "(A - M) -> NZC", ABSOLUTEY, 3, 4, 1),
    NOP_IMP1(NOP, false, 0xDA, "[no operation]", IMPLIED, 1, 2),
    DCP_AY(DCP, false, 0xDB, "M <- (M)-1, (A-M) -> NZC", ABSOLUTEY, 3, 7),
    NOP_AX1(NOP, false, 0xDC, "[no operation]", ABSOLUTEX, 3, 4, 1),
    CMP_AX(CMP, true, 0xDD, "(A - M) -> NZC", ABSOLUTEX, 3, 4, 1),
    DEC_AX(DEC, true, 0xDE, "M <- (M) - 1", ABSOLUTEX, 3, 7),
    DCP_AX(DCP, false, 0xDF, "M <- (M)-1, (A-M) -> NZC", ABSOLUTEX, 3, 7),
    CPX_IMM(CPX, true, 0xE0, "(X - M) -> NZC", IMMEDIATE, 2, 2),
    SBC_INDX(SBC, true, 0xE1, "A <- (A) - M - ~C", INDX, 2, 6),
    NOP_IMM4(NOP, false, 0xE2, "[no operation]", IMMEDIATE, 2, 2),
    ISB_INDX(ISB, false, 0xE3, "M <- (M) - 1,A <- (A)-M-~C", INDX, 3, 8, 1),
    CPX_ZPG(CPX, true, 0xE4, "(X - M) -> NZC", ZPAGE, 2, 3),
    SBC_ZPG(SBC, true, 0xE5, "A <- (A) - M - ~C", ZPAGE, 2, 3),
    INC_ZPG(INC, true, 0xE6, "M <- (M) + 1", ZPAGE, 2, 5),
    ISB_ZPG(ISB, false, 0xE7, "M <- (M) - 1,A <- (A)-M-~C", ZPAGE, 2, 5),
    INX_IMP(INX, true, 0xE8, "X <- (X) +1", IMPLIED, 1, 2),
    SBC_IMM(SBC, true, 0xE9, "A <- (A) - M - ~C", IMMEDIATE, 2, 2),
    NOP_IMP5(NOP, true, 0xEA, "[no operation]", IMPLIED, 1, 2),
    SBC_IMM2(SBC, false, 0xEB, "A <- (A) - M - ~C", IMMEDIATE, 1, 2),
    SBC_ABS(SBC, true, 0xED, "A <- (A) - M - ~C", ABSOLUTE, 3, 4),
    CPX_ABS(CPX, true, 0xEC, "(X - M) -> NZC", ABSOLUTE, 3, 4),
    INC_ABS(INC, true, 0xEE, "M <- (M) + 1", ABSOLUTE, 3, 6),
    ISB_ABS(ISB, false, 0xEF, "M <- (M) - 1,A <- (A)-M-~C", ABSOLUTE, 3, 6),
    BEQ_REL(BEQ, true, 0xF0, "if Z=1, PC = PC + offset", RELATIVE, 2, 2, 2),
    SBC_INDY(SBC, true, 0xF1, "A <- (A) - M - ~C", INDY, 2, 5, 1),
    JAM12__(JAM, false, 0xF2, "[locks up machine]", IMPLIED, 1, 0),
    ISB_INDY(ISB, false, 0xF3, "M <- (M) - 1,A <- (A)-M-~C", INDY, 2, 8),
    NOP_ZX6(NOP, false, 0xF4, "[no operation]", ZPAGEX, 2, 4),
    SBC_ZX(SBC, true, 0xF5, "A <- (A) - M - ~C", ZPAGEX, 2, 4),
    INC_ZX(INC, true, 0xF6, "M <- (M) + 1", ZPAGEX, 2, 6),
    ISB_ZX(ISB, false, 0xF7, "M <- (M) - 1,A <- (A)-M-~C", ZPAGEX, 2, 6),
    SED_IMP(SED, true, 0xF8, "D <- 1", IMPLIED, 1, 2),
    SBC_AY(SBC, true, 0xF9, "A <- (A) - M - ~C", ABSOLUTEY, 3, 4, 1),
    NOP_IMP6(NOP, false, 0xFA, "[no operation]", IMPLIED, 1, 2),
    ISB_AY(ISB, false, 0xFB, "M <- (M) - 1,A <- (A)-M-~C", ABSOLUTEY, 3, 7),
    NOP_AX5(NOP, false, 0xFC, "[no operation]", ABSOLUTEX, 3, 4, 1),
    SBC_AX(SBC, true, 0xFD, "A <- (A) - M - ~C", ABSOLUTEX, 3, 4, 1),
    INC_AX(INC, true, 0xFE, "M <- (M) + 1", ABSOLUTEX, 3, 7),
    ISB_AX(ISB, false, 0xFF, "M <- (M) - 1,A <- (A)-M-~C", ABSOLUTEX, 3, 7),
    ;

    public String mnemonic;
    public boolean standard;
    public int hex;
    public String description;
    public Addressing addressing;
    public int bytes;
    public int time;
    public int timeb;


    static HashMap<Integer, Opcode> map = new HashMap<>();

    static {
        for (Opcode o : values()) {
            map.put(o.hex, o);
        }
    }

    public static Opcode byMnemonic(int mnemonic) {
        return map.get(mnemonic);
    }

    Opcode(Mnemonic type, boolean standard, int hex, String description, Addressing addressing, int bytes, int time, int timeb) {
        this.mnemonic = type.mnemonic;
        this.standard = standard;
        this.hex = hex;
        this.description = description;
        this.addressing = addressing;
        this.bytes = bytes;
        this.time = time;
        this.timeb = timeb;
    }

    Opcode(Mnemonic type, boolean standard, int hex, String description, Addressing addressing, int bytes, int time) {
        this.mnemonic = type.mnemonic;
        this.standard = standard;
        this.hex = hex;
        this.description = description;
        this.addressing = addressing;
        this.bytes = bytes;
        this.time = time;
        this.timeb = 0;
    }

    public static Opcode get(String mnemonic) {
        return byMnemonic(Integer.parseInt(mnemonic, 16));
    }

    @Override
    public String toString() {
        return this.name();
    }
}
